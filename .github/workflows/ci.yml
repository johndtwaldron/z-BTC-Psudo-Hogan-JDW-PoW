name: CI + E2E
on:
  push:
  pull_request:

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Install linters
        run: |
          sudo apt-get update
          sudo apt-get install -y shellcheck ruby-full
          sudo gem install mdl
          curl -sL https://github.com/hadolint/hadolint/releases/latest/download/hadolint-Linux-x86_64 -o /usr/local/bin/hadolint
          chmod +x /usr/local/bin/hadolint

      - name: Install markdownlint-cli (Node) for nicer output
        run: npm i -g markdownlint-cli

      - name: Lint Bash (ShellCheck)
        run: |
          if ls scripts/*.sh >/dev/null 2>&1; then
            shellcheck scripts/*.sh
          else
            echo "No bash scripts to lint."
          fi

      - name: Lint Markdown (mdl + markdownlint-cli)
        run: |
          if command -v mdl >/dev/null 2>&1; then
            mdl -g -c .mdlrc .
          fi
          if command -v markdownlint >/dev/null 2>&1; then
            if [ -f .markdownlint.json ]; then
              markdownlint . --config .markdownlint.json
            else
              markdownlint .
            fi
          fi

      - name: Enforce single H1 per markdown file
        shell: bash
        run: |
          fail=0
          for f in $(git ls-files '*.md'); do
            count=$(grep -E '^[[:space:]]*# ' "$f" | wc -l | tr -d ' ')
            if [ "$count" -gt 1 ]; then
              echo "::error file=$f::Found $count top-level (#) headings. Keep only one H1 per file."
              awk '/^[[:space:]]*# /{printf("line %d: %s\n", NR, $0)}' "$f"
              fail=1
            fi
          done
          [ "$fail" -eq 0 ]

      - name: Lint Dockerfiles (Hadolint)
        run: |
          files=$(find . -type f -name 'Dockerfile*')
          if [ -n "$files" ]; then
            echo "$files" | xargs -r hadolint
          else
            echo "No Dockerfiles to lint."
          fi

      - name: Build Java (skip tests)
        run: |
          if [ -f java/pom.xml ]; then
            mvn -q -DskipTests package -f java/pom.xml -Dmaven.repo.local=${{ runner.temp }}/.m2
          else
            echo "No Java pom.xml; skipping."
          fi

  e2e:
    runs-on: ubuntu-latest
    needs: build-test-lint
    steps:
      - uses: actions/checkout@v4

      - name: Free disk space (pre)
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true

      - name: Disk usage (before)
        run: df -h && docker system df || true

      - name: Docker prune (pre)
        run: |
          docker system prune -af --volumes || true
          docker builder prune -af || true

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Start services (MQ + bitcoind)
        run: |
          docker compose -f compose/docker-compose.yaml up -d
          docker compose -f compose/docker-compose.yaml ps

      - name: Wait for services to be healthy and show logs on failure
        run: |
          set -e
          docker compose -f compose/docker-compose.yaml ps || true
          docker compose -f compose/docker-compose.yaml logs --no-color --tail=50 || true

          SERVICE_MQ=mq
          for i in $(seq 1 60); do
            CID=$(docker compose -f compose/docker-compose.yaml ps -q "$SERVICE_MQ")
            if [ -z "$CID" ]; then
              echo "$SERVICE_MQ container not found yet (attempt $i)."
              sleep 5; continue
            fi
            STATUS=$(docker inspect --format='{{.State.Health.Status}}' "$CID" 2>/dev/null || echo "none")
            echo "$SERVICE_MQ health status: $STATUS"
            [ "$STATUS" = "healthy" ] && { echo "$SERVICE_MQ is healthy."; break; }
            sleep 5
          done
          [ "$STATUS" = "healthy" ] || {
            echo "$SERVICE_MQ failed to become healthy; dumping logs and ps:"
            docker compose -f compose/docker-compose.yaml logs --no-color --tail=500 "$SERVICE_MQ" || true
            docker compose -f compose/docker-compose.yaml ps --all || true
            exit 1
          }

      - name: Build Java (skip tests)
        run: |
          if [ -f java/pom.xml ]; then
            mvn -q -DskipTests package -f java/pom.xml -Dmaven.repo.local=${{ runner.temp }}/.m2
          else
            echo "No Java pom.xml; skipping (scripts will stub files)."
          fi

      - name: Build COBOL (dockerized)
        run: |
          if [ -f cobol/build.sh ]; then
            bash cobol/build.sh
          else
            echo "cobol/build.sh missing; skipping COBOL build."
          fi

      - name: Run HBANKTRX job
        run: |
          if [ -f scripts/hbanktrx.sh ]; then
            bash scripts/hbanktrx.sh
          else
            echo "scripts/hbanktrx.sh missing; skipping."
          fi

      - name: Run HSETTLE job
        run: |
          if [ -f scripts/hsettle.sh ]; then
            bash scripts/hsettle.sh
          else
            echo "scripts/hsettle.sh missing; skipping."
          fi

      - name: Run HFINAL job
        run: |
          if [ -f scripts/hfinal.sh ]; then
            bash scripts/hfinal.sh
          else
            echo "scripts/hfinal.sh missing; skipping."
          fi

      - name: Upload COBOL logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cobol-logs
          path: cobol/logs/
          if-no-files-found: ignore

      - name: Upload audit artifact
        uses: actions/upload-artifact@v4
        with:
          name: audit-report
          path: cobol/data/audit_report.txt
          if-no-files-found: warn

      # ---- always cleanup to avoid "no space left on device" ----
      - name: Docker compose down (post)
        if: always()
        run: docker compose -f compose/docker-compose.yaml down -v --remove-orphans || true

      - name: Docker prune (post)
        if: always()
        run: |
          docker system prune -af --volumes || true
          docker builder prune -af || true

      - name: Disk usage (after)
        if: always()
        run: df -h && docker system df || true